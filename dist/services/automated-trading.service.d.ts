import { EventEmitter } from 'events';
import { Position, StrategyConfig, RiskManagementConfig } from '../types';
export interface TradingConfig {
    maxPositions: number;
    maxRiskPerTrade: number;
    maxDailyLoss: number;
    maxDrawdown: number;
    autoExecute: boolean;
    simulationMode: boolean;
    allowedSymbols: string[];
    tradingHours: {
        start: string;
        end: string;
    };
    riskManagement: RiskManagementConfig;
}
export interface TradingStats {
    totalTrades: number;
    winningTrades: number;
    losingTrades: number;
    totalPnL: number;
    winRate: number;
    avgWin: number;
    avgLoss: number;
    maxDrawdown: number;
    sharpeRatio: number;
    currentPositions: number;
    dailyPnL: number;
}
export declare class AutomatedTradingService extends EventEmitter {
    private auth;
    private instrumentsManager;
    private orderManager;
    private websocketManager;
    private strategyService;
    private riskService;
    private portfolioService;
    private isRunning;
    private tradingConfig;
    private activeStrategies;
    private activePositions;
    private tradingSession;
    private marketDataCache;
    private lastSignalTime;
    constructor();
    private setupEventHandlers;
    initialize(config: TradingConfig): Promise<void>;
    startTrading(): Promise<void>;
    stopTrading(): Promise<void>;
    private performPreTradingChecks;
    private startStrategyExecutionLoop;
    private startPositionMonitoring;
    private startRiskMonitoring;
    private executeStrategy;
    private processSignal;
    private executeSignal;
    private handlePriceUpdate;
    private checkExitConditions;
    private shouldTriggerStopLoss;
    private shouldTriggerTakeProfit;
    private exitPosition;
    private handleOrderFilled;
    private handleEntryOrderFilled;
    private handleExitOrderFilled;
    private calculateRealizedPnL;
    private applyRiskManagement;
    private calculateStopLoss;
    private calculateTakeProfit;
    private calculatePositionSize;
    private canOpenNewPosition;
    private shouldExecuteStrategy;
    private isMarketOpen;
    private updateMarketDataCache;
    private loadActiveStrategies;
    private setupMarketDataSubscriptions;
    private createTradingSession;
    private updateTradingSession;
    private checkRiskLimits;
    private closeAllPositions;
    private trackSignal;
    getTradingStats(): Promise<TradingStats>;
    addStrategy(config: StrategyConfig): Promise<void>;
    removeStrategy(strategyName: string): Promise<void>;
    getActivePositions(): Position[];
    getActiveStrategies(): string[];
    isRunning(): boolean;
    private handleOrderRejected;
    private handleRiskBreach;
    private handlePositionUpdate;
    private monitorPosition;
    private calculateUnrealizedPnL;
}
//# sourceMappingURL=automated-trading.service.d.ts.map