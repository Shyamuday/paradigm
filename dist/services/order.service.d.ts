import { TradeSignal } from '../types';
export declare class OrderService {
    createTrade(sessionId: string, signal: TradeSignal, strategyId?: string): Promise<{
        id: string;
        status: string;
        instrumentId: string;
        sessionId: string;
        strategyId: string | null;
        action: string;
        quantity: number;
        price: number;
        orderType: string;
        orderId: string | null;
        stopLoss: number | null;
        target: number | null;
        trailingStop: boolean;
        orderTime: Date;
        executionTime: Date | null;
        realizedPnL: number | null;
        unrealizedPnL: number | null;
    }>;
    updateTradeStatus(tradeId: string, status: string, orderId?: string, executionPrice?: number): Promise<{
        id: string;
        status: string;
        instrumentId: string;
        sessionId: string;
        strategyId: string | null;
        action: string;
        quantity: number;
        price: number;
        orderType: string;
        orderId: string | null;
        stopLoss: number | null;
        target: number | null;
        trailingStop: boolean;
        orderTime: Date;
        executionTime: Date | null;
        realizedPnL: number | null;
        unrealizedPnL: number | null;
    }>;
    getTrade(tradeId: string): Promise<({
        instrument: {
            symbol: string;
            name: string;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            exchange: string;
            instrumentType: string;
            lotSize: number | null;
            tickSize: number | null;
            isActive: boolean;
        };
        strategy: {
            config: import("@prisma/client/runtime/library").JsonValue;
            name: string;
            description: string | null;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            isActive: boolean;
        } | null;
        positions: {
            id: string;
            instrumentId: string;
            sessionId: string;
            quantity: number;
            stopLoss: number | null;
            target: number | null;
            trailingStop: boolean;
            realizedPnL: number | null;
            unrealizedPnL: number | null;
            tradeId: string | null;
            averagePrice: number;
            currentPrice: number | null;
            side: string;
            openTime: Date;
            closeTime: Date | null;
        }[];
        session: {
            userId: string;
            id: string;
            startTime: Date;
            endTime: Date | null;
            mode: string;
            capital: number;
            status: string;
        };
    } & {
        id: string;
        status: string;
        instrumentId: string;
        sessionId: string;
        strategyId: string | null;
        action: string;
        quantity: number;
        price: number;
        orderType: string;
        orderId: string | null;
        stopLoss: number | null;
        target: number | null;
        trailingStop: boolean;
        orderTime: Date;
        executionTime: Date | null;
        realizedPnL: number | null;
        unrealizedPnL: number | null;
    }) | null>;
    getTradesBySession(sessionId: string): Promise<({
        instrument: {
            symbol: string;
            name: string;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            exchange: string;
            instrumentType: string;
            lotSize: number | null;
            tickSize: number | null;
            isActive: boolean;
        };
        strategy: {
            config: import("@prisma/client/runtime/library").JsonValue;
            name: string;
            description: string | null;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            isActive: boolean;
        } | null;
        positions: {
            id: string;
            instrumentId: string;
            sessionId: string;
            quantity: number;
            stopLoss: number | null;
            target: number | null;
            trailingStop: boolean;
            realizedPnL: number | null;
            unrealizedPnL: number | null;
            tradeId: string | null;
            averagePrice: number;
            currentPrice: number | null;
            side: string;
            openTime: Date;
            closeTime: Date | null;
        }[];
    } & {
        id: string;
        status: string;
        instrumentId: string;
        sessionId: string;
        strategyId: string | null;
        action: string;
        quantity: number;
        price: number;
        orderType: string;
        orderId: string | null;
        stopLoss: number | null;
        target: number | null;
        trailingStop: boolean;
        orderTime: Date;
        executionTime: Date | null;
        realizedPnL: number | null;
        unrealizedPnL: number | null;
    })[]>;
    getTradesByStrategy(strategyId: string): Promise<({
        instrument: {
            symbol: string;
            name: string;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            exchange: string;
            instrumentType: string;
            lotSize: number | null;
            tickSize: number | null;
            isActive: boolean;
        };
        positions: {
            id: string;
            instrumentId: string;
            sessionId: string;
            quantity: number;
            stopLoss: number | null;
            target: number | null;
            trailingStop: boolean;
            realizedPnL: number | null;
            unrealizedPnL: number | null;
            tradeId: string | null;
            averagePrice: number;
            currentPrice: number | null;
            side: string;
            openTime: Date;
            closeTime: Date | null;
        }[];
        session: {
            userId: string;
            id: string;
            startTime: Date;
            endTime: Date | null;
            mode: string;
            capital: number;
            status: string;
        };
    } & {
        id: string;
        status: string;
        instrumentId: string;
        sessionId: string;
        strategyId: string | null;
        action: string;
        quantity: number;
        price: number;
        orderType: string;
        orderId: string | null;
        stopLoss: number | null;
        target: number | null;
        trailingStop: boolean;
        orderTime: Date;
        executionTime: Date | null;
        realizedPnL: number | null;
        unrealizedPnL: number | null;
    })[]>;
    getPendingTrades(sessionId: string): Promise<({
        instrument: {
            symbol: string;
            name: string;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            exchange: string;
            instrumentType: string;
            lotSize: number | null;
            tickSize: number | null;
            isActive: boolean;
        };
        strategy: {
            config: import("@prisma/client/runtime/library").JsonValue;
            name: string;
            description: string | null;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            isActive: boolean;
        } | null;
    } & {
        id: string;
        status: string;
        instrumentId: string;
        sessionId: string;
        strategyId: string | null;
        action: string;
        quantity: number;
        price: number;
        orderType: string;
        orderId: string | null;
        stopLoss: number | null;
        target: number | null;
        trailingStop: boolean;
        orderTime: Date;
        executionTime: Date | null;
        realizedPnL: number | null;
        unrealizedPnL: number | null;
    })[]>;
    createPosition(sessionId: string, tradeId: string, positionData: {
        symbol: string;
        quantity: number;
        averagePrice: number;
        side: 'LONG' | 'SHORT';
        stopLoss?: number;
        target?: number;
    }): Promise<{
        id: string;
        instrumentId: string;
        sessionId: string;
        quantity: number;
        stopLoss: number | null;
        target: number | null;
        trailingStop: boolean;
        realizedPnL: number | null;
        unrealizedPnL: number | null;
        tradeId: string | null;
        averagePrice: number;
        currentPrice: number | null;
        side: string;
        openTime: Date;
        closeTime: Date | null;
    }>;
    updatePosition(positionId: string, updates: {
        currentPrice?: number;
        quantity?: number;
        stopLoss?: number;
        target?: number;
        unrealizedPnL?: number;
        realizedPnL?: number;
    }): Promise<{
        id: string;
        instrumentId: string;
        sessionId: string;
        quantity: number;
        stopLoss: number | null;
        target: number | null;
        trailingStop: boolean;
        realizedPnL: number | null;
        unrealizedPnL: number | null;
        tradeId: string | null;
        averagePrice: number;
        currentPrice: number | null;
        side: string;
        openTime: Date;
        closeTime: Date | null;
    }>;
    closePosition(positionId: string, closePrice: number): Promise<{
        id: string;
        instrumentId: string;
        sessionId: string;
        quantity: number;
        stopLoss: number | null;
        target: number | null;
        trailingStop: boolean;
        realizedPnL: number | null;
        unrealizedPnL: number | null;
        tradeId: string | null;
        averagePrice: number;
        currentPrice: number | null;
        side: string;
        openTime: Date;
        closeTime: Date | null;
    }>;
    getPositions(sessionId: string): Promise<({
        instrument: {
            symbol: string;
            name: string;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            exchange: string;
            instrumentType: string;
            lotSize: number | null;
            tickSize: number | null;
            isActive: boolean;
        };
        trade: {
            id: string;
            status: string;
            instrumentId: string;
            sessionId: string;
            strategyId: string | null;
            action: string;
            quantity: number;
            price: number;
            orderType: string;
            orderId: string | null;
            stopLoss: number | null;
            target: number | null;
            trailingStop: boolean;
            orderTime: Date;
            executionTime: Date | null;
            realizedPnL: number | null;
            unrealizedPnL: number | null;
        } | null;
    } & {
        id: string;
        instrumentId: string;
        sessionId: string;
        quantity: number;
        stopLoss: number | null;
        target: number | null;
        trailingStop: boolean;
        realizedPnL: number | null;
        unrealizedPnL: number | null;
        tradeId: string | null;
        averagePrice: number;
        currentPrice: number | null;
        side: string;
        openTime: Date;
        closeTime: Date | null;
    })[]>;
    getOpenPositions(sessionId: string): Promise<({
        instrument: {
            symbol: string;
            name: string;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            exchange: string;
            instrumentType: string;
            lotSize: number | null;
            tickSize: number | null;
            isActive: boolean;
        };
        trade: {
            id: string;
            status: string;
            instrumentId: string;
            sessionId: string;
            strategyId: string | null;
            action: string;
            quantity: number;
            price: number;
            orderType: string;
            orderId: string | null;
            stopLoss: number | null;
            target: number | null;
            trailingStop: boolean;
            orderTime: Date;
            executionTime: Date | null;
            realizedPnL: number | null;
            unrealizedPnL: number | null;
        } | null;
    } & {
        id: string;
        instrumentId: string;
        sessionId: string;
        quantity: number;
        stopLoss: number | null;
        target: number | null;
        trailingStop: boolean;
        realizedPnL: number | null;
        unrealizedPnL: number | null;
        tradeId: string | null;
        averagePrice: number;
        currentPrice: number | null;
        side: string;
        openTime: Date;
        closeTime: Date | null;
    })[]>;
    private calculateRealizedPnL;
    private calculatePositionPnL;
    updatePositionPnL(positionId: string, currentPrice: number): Promise<void>;
    getPositionMetrics(sessionId: string): Promise<{
        openPositions: number;
        totalPositionValue: number;
        totalUnrealizedPnL: number;
        totalRealizedPnL: number;
        netPnL: number;
    }>;
    getSessionPnL(sessionId: string): Promise<{
        realizedPnL: number;
        unrealizedPnL: number;
        totalPnL: number;
    }>;
    getRecentTrades(limit?: number): Promise<({
        instrument: {
            symbol: string;
            name: string;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            exchange: string;
            instrumentType: string;
            lotSize: number | null;
            tickSize: number | null;
            isActive: boolean;
        };
    } & {
        id: string;
        status: string;
        instrumentId: string;
        sessionId: string;
        strategyId: string | null;
        action: string;
        quantity: number;
        price: number;
        orderType: string;
        orderId: string | null;
        stopLoss: number | null;
        target: number | null;
        trailingStop: boolean;
        orderTime: Date;
        executionTime: Date | null;
        realizedPnL: number | null;
        unrealizedPnL: number | null;
    })[]>;
}
//# sourceMappingURL=order.service.d.ts.map